*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+
+ MieruPC2010 v1.3.4: README                                           *
*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+
Copyright (c) 2008-2010 Arch Lab. Tokyo Institute of Technology,
MieruPC Inc. All rights reserved.

The configuration(.bit) file and the source codes of MieruPC are
provided to the users for academic, educational or training use. You
may modify and/or redistribute the files within a class, a laboratory,
or a training section. Redistribution beyond such an area and commercial
use of the files are strongly prohibited.

*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+
コンフィギュレーションのbitファイルやMieruPCのソースコードは，製品を購入
したユーザに対して，教育や研修目的での利用のために提供するものです．クラ
スや研究室，研修部門の範囲に限り，これらのファイルを改変し，再配布できま
す．これらの範囲を超えたファイル群の再配布や商用利用は禁止されています．

*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+
目次
・コンフィグレーションファイルの生成方法
・メモリマップ
・CP0仕様
・起動時のシーケンス
・キーコード一覧

*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+
コンフィグレーションファイルの生成方法については，make_MieruPC.pptを参照
してください．ISE 11.5，およびISE 12.2での動作を確認しています．

*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+
MieruPC v1.3.4のメモリマップについて概説します．
メモリアドレスは下位24ビットが有効です．上位8ビットは無視されます．

◎ 0x000000 - 0x0000ff: スタートアップルーチン用
スタートアップルーチンを記述するための領域です．

◎ 0x000100 - 0x0001ff: 例外ハンドラ用
例外ハンドラを記述するための領域です．

◎ 0x000200 - 0x07ffff: プログラム・データ領域
プログラムおよびデータを格納するための領域です．

◎ 0x080000 - 0x8000ff: 無効

◎ 0x800100 - 0x8001ff: I/O用
下記のアドレスが使用されています．それ以外のアドレスは予約されています．

0x800100: キーコード(MieruPC v1.0.0〜)
int型，またはchar型で読み書きします．
キーコードを0xXXとすると，キーが押されると0x000000XX，
離されると0x0000XX00が1コマンドとしてキーバッファに蓄えられます．
このアドレスへの読み出しがおこわれると，
キーバッファから1コマンド分を取り出しその値を返します．
キーバッファからあふれた入力は警告なしに破棄されます．
キー入力割り込みが存在しないので適宜ポーリングで読み出す必要があります．
キーコードのマップはWindowsのそれと同様ですが，
Shift, Ctrl, Altは左右の別があるもの(0xa0〜0xa5)のみ有効です．

0x800104: LCD制御用
char型で読み書きします．
読み出し時は書き込みビジーなら0x01，そうでなければ0x00が返ります．
書き込み時は書き込んだバイト文字を液晶モジュールに送信します．
使用例はitcfuncのソースコードをご覧ください．

0x800108 - 0x80010b: MMC制御用
int型で読み書きします．
アクセスしたいブロックを含むMMCの物理アドレスを書き込むと，自動的にMMCに
アクセスして，当該ブロックのデータをMMCデータ用の領域に書き込みます．
読み出し時は，上位23ビットには現在選択されているブロックの番号，
下位1ビットにはブロックへのアクセスが完了したかが入ります．
中間の8ビットには0が入ります．

0x80010c - 0x80010f: カウンタ
int型で読み出します．1kHzのカウンタです．
MieruPCの起動をゼロとして，1ミリ秒ごとにインクリメントされます．

0x8001f0 - 0x8001ff: 汎用入出力(MieruPC v1.0.2〜)
char型で読み出します．
GPIO2の1〜16ピンが，0x01f0〜0x01ffに対応します．
4ピンずつのグループごとに，書き込みがあったグループについては
それ以後汎用出力であるとみなされます．
例えば，0x01f1に書き込むと1〜4ピンは汎用出力として扱われます．
汎用入力は，その状態に合わせて0x00または0x01が返ります．
汎用出力は，0x01を書き込むと対応する出力が1になります．
逆に，0x00を書き込むと0になります．

◎ 0x800200 - 0x8003ff: MMCデータ用
MMCの現在選択されているブロックのデータです．
MMCがビジーの場合(制御用レジスタの下位1ビットが0のとき)，
読み出し値は不定となり，書き込みはおこなわれません．

◎ 0x800400-0xffffff: 無効

*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+
MieruPC v1.3.0のCP0仕様について概説します．

以下のレジスタが有効です．
・COUNT   (レジスタ番号 9)
  - インクリメントの周期は10マイクロ秒です(100kHz)
・COMPARE (レジスタ番号11)
・SR      (レジスタ番号12)
  - 機能するのは下位2ビット(EXL, IE)のみ
・CAUSE   (レジスタ番号13)
  - 機能するのは31(BD), 15(IP7), 6-2(ExcCode)の各ビットのみ
・EPC     (レジスタ番号14)
  - 機能するのは下位20ビットのみ

以下の例外が有効です．
・INT     (例外コード 0)
  - タイマ割込み．COUNTとCOMPAREが等しくなったときに割込みが発生します
  - EXL = 0, IE = 1のときのみ有効
・SYSCALL (例外コード 8)
  - システムコール．ユーザプログラムから呼び出されます
  - 例外から復帰するときには，EPCに4を加えること

*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+
(参考) 起動時の初期イメージ読み込みシーケンス(C擬似コード)

    unsigned int i, j;
    volatile unsigned int  *ctrl = (volatile unsigned int *) 0x80108;
    volatile unsigned char *src, *dst;

    dst = 0;
    for (i = 0; i < 1024; i++) {
        *ctrl = (i + 81) * 512;
        while ((*ctrl & 0x1) == 0);
        src = (volatile unsigned char *) 0x80200;
        for (j = 0; j < 512; j++) {
            *dst = *src;
            src++;
            dst++;
        }
    }

*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+
(参考) キーコードの一覧

char *key[256] = {
    "","","","","","","","", // 0
    "BS","Tab","","","","Enter","","", // 0
    "","","","Pause","Caps","","","", // 1
    "","","","Esc","","","","", // 1
    "Space","PageUp","PageDown","End","Home","Left","Up","Right", // 2
    "Down","","","","PrtScr","Ins","Del","", // 2
    "0","1","2","3","4","5","6","7", // 3
    "8","9","","","","","","", // 3
    "","A","B","C","D","E","F","G", // 4
    "H","I","J","K","L","M","N","O", // 4
    "P","Q","R","S","T","U","V","W", // 5
    "X","Y","Z","Left-Win","Right-Win","App","","", // 5
    "Num 0","Num 1","Num 2","Num 3","Num 4","Num 5","Num 6","Num 7", // 6
    "Num 8","Num 9","Num *","Num +","Num Enter","Num -","Num .","Num /", // 6
    "F1","F2","F3","F4","F5","F6","F7","F8", // 7
    "F9","F10","F11","F12","","","","", // 7
    "","","","","","","","", // 8
    "","","","","","","","", // 8
    "NumLock","ScrLock","","","","","","", // 9
    "","","","","","","","", // 9
    "Left-Shift","Right-Shift","Left-Ctrl","Right-Ctrl","Left-Alt","Right-Alt","","", // a
    "","","","","","","","", // a
    "","","","","","","","", // b
    "","",";","=",",","-",".","/", // b
    "`","","","","","","","", // c
    "","","","","","","","", // c
    "","","","","","","","", // d
    "","","","[","\\","]","'","", // d
    "","","","","","","","", // e
    "","","","","","","","", // e
    "","","","","","","","", // f
    "","","","","","","",""}; // f

*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+